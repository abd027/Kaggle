{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0c856554",
   "metadata": {
    "papermill": {
     "duration": 0.012544,
     "end_time": "2024-08-23T11:59:52.149779",
     "exception": false,
     "start_time": "2024-08-23T11:59:52.137235",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## House Price Prediction:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f27b66f",
   "metadata": {
    "papermill": {
     "duration": 0.011932,
     "end_time": "2024-08-23T11:59:52.173777",
     "exception": false,
     "start_time": "2024-08-23T11:59:52.161845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**For EDA, check EDA practice 4**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1725aa0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:52.200367Z",
     "iopub.status.busy": "2024-08-23T11:59:52.199851Z",
     "iopub.status.idle": "2024-08-23T11:59:54.685753Z",
     "shell.execute_reply": "2024-08-23T11:59:54.684464Z"
    },
    "papermill": {
     "duration": 2.502313,
     "end_time": "2024-08-23T11:59:54.688792",
     "exception": false,
     "start_time": "2024-08-23T11:59:52.186479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6bfe28f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:54.714678Z",
     "iopub.status.busy": "2024-08-23T11:59:54.714062Z",
     "iopub.status.idle": "2024-08-23T11:59:54.768855Z",
     "shell.execute_reply": "2024-08-23T11:59:54.767541Z"
    },
    "papermill": {
     "duration": 0.070949,
     "end_time": "2024-08-23T11:59:54.771748",
     "exception": false,
     "start_time": "2024-08-23T11:59:54.700799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_train = pd.read_csv('/kaggle/input/house-price-prediction-seattle/train.csv')\n",
    "data_test = pd.read_csv('/kaggle/input/house-price-prediction-seattle/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "80f7810c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:54.798532Z",
     "iopub.status.busy": "2024-08-23T11:59:54.797573Z",
     "iopub.status.idle": "2024-08-23T11:59:54.831641Z",
     "shell.execute_reply": "2024-08-23T11:59:54.830502Z"
    },
    "papermill": {
     "duration": 0.050199,
     "end_time": "2024-08-23T11:59:54.834339",
     "exception": false,
     "start_time": "2024-08-23T11:59:54.784140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beds</th>\n",
       "      <th>baths</th>\n",
       "      <th>size</th>\n",
       "      <th>size_units</th>\n",
       "      <th>lot_size</th>\n",
       "      <th>lot_size_units</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2590.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>6000.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98144</td>\n",
       "      <td>795000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2240.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>0.31</td>\n",
       "      <td>acre</td>\n",
       "      <td>98106</td>\n",
       "      <td>915000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2040.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>3783.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98107</td>\n",
       "      <td>950000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>5175.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98199</td>\n",
       "      <td>1950000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1042.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>98102</td>\n",
       "      <td>950000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   beds  baths    size size_units  lot_size lot_size_units  zip_code  \\\n",
       "0     3    2.5  2590.0       sqft   6000.00           sqft     98144   \n",
       "1     4    2.0  2240.0       sqft      0.31           acre     98106   \n",
       "2     4    3.0  2040.0       sqft   3783.00           sqft     98107   \n",
       "3     4    3.0  3800.0       sqft   5175.00           sqft     98199   \n",
       "4     2    2.0  1042.0       sqft       NaN            NaN     98102   \n",
       "\n",
       "       price  \n",
       "0   795000.0  \n",
       "1   915000.0  \n",
       "2   950000.0  \n",
       "3  1950000.0  \n",
       "4   950000.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "39363392",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:54.862239Z",
     "iopub.status.busy": "2024-08-23T11:59:54.861793Z",
     "iopub.status.idle": "2024-08-23T11:59:54.881244Z",
     "shell.execute_reply": "2024-08-23T11:59:54.879807Z"
    },
    "papermill": {
     "duration": 0.036762,
     "end_time": "2024-08-23T11:59:54.884046",
     "exception": false,
     "start_time": "2024-08-23T11:59:54.847284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beds</th>\n",
       "      <th>baths</th>\n",
       "      <th>size</th>\n",
       "      <th>size_units</th>\n",
       "      <th>lot_size</th>\n",
       "      <th>lot_size_units</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2850.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>4200.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98119</td>\n",
       "      <td>1175000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3040.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>5002.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98106</td>\n",
       "      <td>1057500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>6048.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98125</td>\n",
       "      <td>799000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2360.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>0.28</td>\n",
       "      <td>acre</td>\n",
       "      <td>98188</td>\n",
       "      <td>565000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1942.0</td>\n",
       "      <td>sqft</td>\n",
       "      <td>1603.00</td>\n",
       "      <td>sqft</td>\n",
       "      <td>98107</td>\n",
       "      <td>1187000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   beds  baths    size size_units  lot_size lot_size_units  zip_code  \\\n",
       "0     3    3.0  2850.0       sqft   4200.00           sqft     98119   \n",
       "1     4    5.0  3040.0       sqft   5002.00           sqft     98106   \n",
       "2     3    1.0  1290.0       sqft   6048.00           sqft     98125   \n",
       "3     3    2.0  2360.0       sqft      0.28           acre     98188   \n",
       "4     3    3.5  1942.0       sqft   1603.00           sqft     98107   \n",
       "\n",
       "       price  \n",
       "0  1175000.0  \n",
       "1  1057500.0  \n",
       "2   799000.0  \n",
       "3   565000.0  \n",
       "4  1187000.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14c82073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:54.911488Z",
     "iopub.status.busy": "2024-08-23T11:59:54.911055Z",
     "iopub.status.idle": "2024-08-23T11:59:54.919010Z",
     "shell.execute_reply": "2024-08-23T11:59:54.917759Z"
    },
    "papermill": {
     "duration": 0.024871,
     "end_time": "2024-08-23T11:59:54.921589",
     "exception": false,
     "start_time": "2024-08-23T11:59:54.896718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2016, 8)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3f7c31bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:54.950690Z",
     "iopub.status.busy": "2024-08-23T11:59:54.950146Z",
     "iopub.status.idle": "2024-08-23T11:59:54.960043Z",
     "shell.execute_reply": "2024-08-23T11:59:54.958118Z"
    },
    "papermill": {
     "duration": 0.027754,
     "end_time": "2024-08-23T11:59:54.963070",
     "exception": false,
     "start_time": "2024-08-23T11:59:54.935316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(505, 8)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5a37aaa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:54.991579Z",
     "iopub.status.busy": "2024-08-23T11:59:54.991130Z",
     "iopub.status.idle": "2024-08-23T11:59:55.009500Z",
     "shell.execute_reply": "2024-08-23T11:59:55.008079Z"
    },
    "papermill": {
     "duration": 0.036049,
     "end_time": "2024-08-23T11:59:55.012744",
     "exception": false,
     "start_time": "2024-08-23T11:59:54.976695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beds               11\n",
       "baths              16\n",
       "size              879\n",
       "size_units          1\n",
       "lot_size          959\n",
       "lot_size_units      2\n",
       "zip_code           28\n",
       "price             767\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "30f3c560",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.042303Z",
     "iopub.status.busy": "2024-08-23T11:59:55.041876Z",
     "iopub.status.idle": "2024-08-23T11:59:55.053697Z",
     "shell.execute_reply": "2024-08-23T11:59:55.052330Z"
    },
    "papermill": {
     "duration": 0.029137,
     "end_time": "2024-08-23T11:59:55.056567",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.027430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beds                8\n",
       "baths              13\n",
       "size              375\n",
       "size_units          1\n",
       "lot_size          314\n",
       "lot_size_units      2\n",
       "zip_code           29\n",
       "price             322\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d22f2f71",
   "metadata": {
    "papermill": {
     "duration": 0.013799,
     "end_time": "2024-08-23T11:59:55.083692",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.069893",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Checking for null values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "778bc1fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.112886Z",
     "iopub.status.busy": "2024-08-23T11:59:55.112437Z",
     "iopub.status.idle": "2024-08-23T11:59:55.124126Z",
     "shell.execute_reply": "2024-08-23T11:59:55.122947Z"
    },
    "papermill": {
     "duration": 0.029087,
     "end_time": "2024-08-23T11:59:55.127071",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.097984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beds                0\n",
       "baths               0\n",
       "size                0\n",
       "size_units          0\n",
       "lot_size          347\n",
       "lot_size_units    347\n",
       "zip_code            0\n",
       "price               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cc58f5ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.156708Z",
     "iopub.status.busy": "2024-08-23T11:59:55.156257Z",
     "iopub.status.idle": "2024-08-23T11:59:55.166069Z",
     "shell.execute_reply": "2024-08-23T11:59:55.164918Z"
    },
    "papermill": {
     "duration": 0.027463,
     "end_time": "2024-08-23T11:59:55.168534",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.141071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beds               0\n",
       "baths              0\n",
       "size               0\n",
       "size_units         0\n",
       "lot_size          77\n",
       "lot_size_units    77\n",
       "zip_code           0\n",
       "price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "402c1c97",
   "metadata": {
    "papermill": {
     "duration": 0.012925,
     "end_time": "2024-08-23T11:59:55.194863",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.181938",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Converiting inconsistent values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a92f2d89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.224581Z",
     "iopub.status.busy": "2024-08-23T11:59:55.224106Z",
     "iopub.status.idle": "2024-08-23T11:59:55.243614Z",
     "shell.execute_reply": "2024-08-23T11:59:55.242312Z"
    },
    "papermill": {
     "duration": 0.037829,
     "end_time": "2024-08-23T11:59:55.246640",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.208811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "acreToSquareFoot = 43560\n",
    "\n",
    "mask_train = data_train['lot_size_units'] == 'acre'\n",
    "mask_test = data_test['lot_size_units'] == 'acre'\n",
    "\n",
    "data_train.loc[mask_train, 'lot_size'] *= acreToSquareFoot\n",
    "data_test.loc[mask_test, 'lot_size'] *= acreToSquareFoot\n",
    "\n",
    "data_train.loc[mask_train, 'lot_size_units'] = 'sqft'\n",
    "data_test.loc[mask_test, 'lot_size_units'] = 'sqft'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d485080",
   "metadata": {
    "papermill": {
     "duration": 0.013014,
     "end_time": "2024-08-23T11:59:55.273313",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.260299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Filling missing values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "14a84780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.303404Z",
     "iopub.status.busy": "2024-08-23T11:59:55.302986Z",
     "iopub.status.idle": "2024-08-23T11:59:55.310382Z",
     "shell.execute_reply": "2024-08-23T11:59:55.309101Z"
    },
    "papermill": {
     "duration": 0.025951,
     "end_time": "2024-08-23T11:59:55.313645",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.287694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/881733813.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  data_train['lot_size_units'].fillna('sqft', inplace = True)\n"
     ]
    }
   ],
   "source": [
    "data_train['lot_size_units'].fillna('sqft', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11791b48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.343166Z",
     "iopub.status.busy": "2024-08-23T11:59:55.342727Z",
     "iopub.status.idle": "2024-08-23T11:59:55.352721Z",
     "shell.execute_reply": "2024-08-23T11:59:55.351412Z"
    },
    "papermill": {
     "duration": 0.027277,
     "end_time": "2024-08-23T11:59:55.355320",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.328043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2987932980.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  data_train['lot_size'].fillna(data_train['lot_size'].median(), inplace = True)\n"
     ]
    }
   ],
   "source": [
    "data_train['lot_size'].fillna(data_train['lot_size'].median(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7f8ecb42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.385763Z",
     "iopub.status.busy": "2024-08-23T11:59:55.385276Z",
     "iopub.status.idle": "2024-08-23T11:59:55.392790Z",
     "shell.execute_reply": "2024-08-23T11:59:55.391585Z"
    },
    "papermill": {
     "duration": 0.025859,
     "end_time": "2024-08-23T11:59:55.395597",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.369738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/4223998410.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  data_test['lot_size_units'].fillna('sqft', inplace = True)\n"
     ]
    }
   ],
   "source": [
    "data_test['lot_size_units'].fillna('sqft', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "aa016c79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.425258Z",
     "iopub.status.busy": "2024-08-23T11:59:55.424384Z",
     "iopub.status.idle": "2024-08-23T11:59:55.431626Z",
     "shell.execute_reply": "2024-08-23T11:59:55.430582Z"
    },
    "papermill": {
     "duration": 0.025123,
     "end_time": "2024-08-23T11:59:55.434466",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.409343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2108294667.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  data_test['lot_size'].fillna(data_test['lot_size'].median(), inplace = True)\n"
     ]
    }
   ],
   "source": [
    "data_test['lot_size'].fillna(data_test['lot_size'].median(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7be8176c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.463903Z",
     "iopub.status.busy": "2024-08-23T11:59:55.463435Z",
     "iopub.status.idle": "2024-08-23T11:59:55.472047Z",
     "shell.execute_reply": "2024-08-23T11:59:55.470810Z"
    },
    "papermill": {
     "duration": 0.026526,
     "end_time": "2024-08-23T11:59:55.474799",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.448273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "median for train data = 5000.0\n",
      "median for test data = 5011.0\n"
     ]
    }
   ],
   "source": [
    "print('median for train data =' , data_train['lot_size'].median())\n",
    "print('median for test data =', data_test['lot_size'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b7139c39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.505492Z",
     "iopub.status.busy": "2024-08-23T11:59:55.504426Z",
     "iopub.status.idle": "2024-08-23T11:59:55.514689Z",
     "shell.execute_reply": "2024-08-23T11:59:55.513384Z"
    },
    "papermill": {
     "duration": 0.028347,
     "end_time": "2024-08-23T11:59:55.517264",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.488917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beds              0\n",
       "baths             0\n",
       "size              0\n",
       "size_units        0\n",
       "lot_size          0\n",
       "lot_size_units    0\n",
       "zip_code          0\n",
       "price             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "74d14dec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.547616Z",
     "iopub.status.busy": "2024-08-23T11:59:55.546678Z",
     "iopub.status.idle": "2024-08-23T11:59:55.557883Z",
     "shell.execute_reply": "2024-08-23T11:59:55.556635Z"
    },
    "papermill": {
     "duration": 0.029092,
     "end_time": "2024-08-23T11:59:55.560489",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.531397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "beds              0\n",
       "baths             0\n",
       "size              0\n",
       "size_units        0\n",
       "lot_size          0\n",
       "lot_size_units    0\n",
       "zip_code          0\n",
       "price             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3dd815c",
   "metadata": {
    "papermill": {
     "duration": 0.013738,
     "end_time": "2024-08-23T11:59:55.588984",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.575246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Deleting uneccessary columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fa6deed5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.622689Z",
     "iopub.status.busy": "2024-08-23T11:59:55.622223Z",
     "iopub.status.idle": "2024-08-23T11:59:55.631720Z",
     "shell.execute_reply": "2024-08-23T11:59:55.630400Z"
    },
    "papermill": {
     "duration": 0.030738,
     "end_time": "2024-08-23T11:59:55.634687",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.603949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_train.drop(['size_units','lot_size_units','zip_code'], axis = 1 , inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d0e656f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.665173Z",
     "iopub.status.busy": "2024-08-23T11:59:55.664735Z",
     "iopub.status.idle": "2024-08-23T11:59:55.671843Z",
     "shell.execute_reply": "2024-08-23T11:59:55.670329Z"
    },
    "papermill": {
     "duration": 0.025416,
     "end_time": "2024-08-23T11:59:55.674477",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.649061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_test.drop(['size_units','lot_size_units','zip_code'], axis = 1 , inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6be1d851",
   "metadata": {
    "papermill": {
     "duration": 0.01493,
     "end_time": "2024-08-23T11:59:55.704277",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.689347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Checking correlation using heatmap:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de1d74e",
   "metadata": {
    "papermill": {
     "duration": 0.014423,
     "end_time": "2024-08-23T11:59:55.733107",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.718684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### For train:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ef8af92c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:55.768358Z",
     "iopub.status.busy": "2024-08-23T11:59:55.767890Z",
     "iopub.status.idle": "2024-08-23T11:59:56.207792Z",
     "shell.execute_reply": "2024-08-23T11:59:56.206224Z"
    },
    "papermill": {
     "duration": 0.460726,
     "end_time": "2024-08-23T11:59:56.210602",
     "exception": false,
     "start_time": "2024-08-23T11:59:55.749876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data_train.corr(), cmap ='crest',annot = True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "462a4769",
   "metadata": {
    "papermill": {
     "duration": 0.015061,
     "end_time": "2024-08-23T11:59:56.240770",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.225709",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### For test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "910110c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:56.272572Z",
     "iopub.status.busy": "2024-08-23T11:59:56.272096Z",
     "iopub.status.idle": "2024-08-23T11:59:56.681092Z",
     "shell.execute_reply": "2024-08-23T11:59:56.679304Z"
    },
    "papermill": {
     "duration": 0.428709,
     "end_time": "2024-08-23T11:59:56.684457",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.255748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data_test.corr(), cmap ='crest',annot = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c45fbac5",
   "metadata": {
    "papermill": {
     "duration": 0.018595,
     "end_time": "2024-08-23T11:59:56.721476",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.702881",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Now every feature of the dataset has a relation with output(price)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c14a0b48",
   "metadata": {
    "papermill": {
     "duration": 0.015307,
     "end_time": "2024-08-23T11:59:56.752865",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.737558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "090e0619",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:56.786639Z",
     "iopub.status.busy": "2024-08-23T11:59:56.785560Z",
     "iopub.status.idle": "2024-08-23T11:59:56.801307Z",
     "shell.execute_reply": "2024-08-23T11:59:56.799790Z"
    },
    "papermill": {
     "duration": 0.035498,
     "end_time": "2024-08-23T11:59:56.803931",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.768433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beds</th>\n",
       "      <th>baths</th>\n",
       "      <th>size</th>\n",
       "      <th>lot_size</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2850.0</td>\n",
       "      <td>4200.0</td>\n",
       "      <td>1175000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3040.0</td>\n",
       "      <td>5002.0</td>\n",
       "      <td>1057500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>6048.0</td>\n",
       "      <td>799000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2360.0</td>\n",
       "      <td>12196.8</td>\n",
       "      <td>565000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1942.0</td>\n",
       "      <td>1603.0</td>\n",
       "      <td>1187000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   beds  baths    size  lot_size      price\n",
       "0     3    3.0  2850.0    4200.0  1175000.0\n",
       "1     4    5.0  3040.0    5002.0  1057500.0\n",
       "2     3    1.0  1290.0    6048.0   799000.0\n",
       "3     3    2.0  2360.0   12196.8   565000.0\n",
       "4     3    3.5  1942.0    1603.0  1187000.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "df89fe49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:56.839756Z",
     "iopub.status.busy": "2024-08-23T11:59:56.839304Z",
     "iopub.status.idle": "2024-08-23T11:59:56.855866Z",
     "shell.execute_reply": "2024-08-23T11:59:56.854573Z"
    },
    "papermill": {
     "duration": 0.03739,
     "end_time": "2024-08-23T11:59:56.858856",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.821466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beds</th>\n",
       "      <th>baths</th>\n",
       "      <th>size</th>\n",
       "      <th>lot_size</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2590.0</td>\n",
       "      <td>6000.0</td>\n",
       "      <td>795000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2240.0</td>\n",
       "      <td>13503.6</td>\n",
       "      <td>915000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2040.0</td>\n",
       "      <td>3783.0</td>\n",
       "      <td>950000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>5175.0</td>\n",
       "      <td>1950000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1042.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>950000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   beds  baths    size  lot_size      price\n",
       "0     3    2.5  2590.0    6000.0   795000.0\n",
       "1     4    2.0  2240.0   13503.6   915000.0\n",
       "2     4    3.0  2040.0    3783.0   950000.0\n",
       "3     4    3.0  3800.0    5175.0  1950000.0\n",
       "4     2    2.0  1042.0    5000.0   950000.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "668bc095",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:56.894183Z",
     "iopub.status.busy": "2024-08-23T11:59:56.893762Z",
     "iopub.status.idle": "2024-08-23T11:59:56.902270Z",
     "shell.execute_reply": "2024-08-23T11:59:56.900814Z"
    },
    "papermill": {
     "duration": 0.029222,
     "end_time": "2024-08-23T11:59:56.904978",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.875756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# input:\n",
    "x_train = data_train.drop('price', axis = 1)\n",
    "x_test = data_test.drop('price', axis = 1)\n",
    "# output:\n",
    "y_train = data_train['price']\n",
    "y_test = data_test['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "549b4e2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:56.939489Z",
     "iopub.status.busy": "2024-08-23T11:59:56.939029Z",
     "iopub.status.idle": "2024-08-23T11:59:57.479898Z",
     "shell.execute_reply": "2024-08-23T11:59:57.477765Z"
    },
    "papermill": {
     "duration": 0.562183,
     "end_time": "2024-08-23T11:59:57.483406",
     "exception": false,
     "start_time": "2024-08-23T11:59:56.921223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "920c2b7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:57.519581Z",
     "iopub.status.busy": "2024-08-23T11:59:57.519121Z",
     "iopub.status.idle": "2024-08-23T11:59:57.571093Z",
     "shell.execute_reply": "2024-08-23T11:59:57.569901Z"
    },
    "papermill": {
     "duration": 0.073113,
     "end_time": "2024-08-23T11:59:57.573783",
     "exception": false,
     "start_time": "2024-08-23T11:59:57.500670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "354920d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:57.611615Z",
     "iopub.status.busy": "2024-08-23T11:59:57.610669Z",
     "iopub.status.idle": "2024-08-23T11:59:57.618621Z",
     "shell.execute_reply": "2024-08-23T11:59:57.617012Z"
    },
    "papermill": {
     "duration": 0.030084,
     "end_time": "2024-08-23T11:59:57.621204",
     "exception": false,
     "start_time": "2024-08-23T11:59:57.591120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "prediction = lr.predict(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2a30261",
   "metadata": {
    "papermill": {
     "duration": 0.016216,
     "end_time": "2024-08-23T11:59:57.654073",
     "exception": false,
     "start_time": "2024-08-23T11:59:57.637857",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Score:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "48358b6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-23T11:59:57.689922Z",
     "iopub.status.busy": "2024-08-23T11:59:57.688675Z",
     "iopub.status.idle": "2024-08-23T11:59:57.700046Z",
     "shell.execute_reply": "2024-08-23T11:59:57.698425Z"
    },
    "papermill": {
     "duration": 0.032336,
     "end_time": "2024-08-23T11:59:57.702880",
     "exception": false,
     "start_time": "2024-08-23T11:59:57.670544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5312326247689867"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(x_test,y_test)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2758754,
     "sourceId": 4765938,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.821261,
   "end_time": "2024-08-23T11:59:58.545783",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-23T11:59:48.724522",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
