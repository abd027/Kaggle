{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b40ee640",
   "metadata": {
    "papermill": {
     "duration": 0.009608,
     "end_time": "2024-08-21T10:35:21.538106",
     "exception": false,
     "start_time": "2024-08-21T10:35:21.528498",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Salary Prediction:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f7f78c3",
   "metadata": {
    "papermill": {
     "duration": 0.008199,
     "end_time": "2024-08-21T10:35:21.555888",
     "exception": false,
     "start_time": "2024-08-21T10:35:21.547689",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<strong>Here, we are making a ML model which predicts the salary(package) of a person on the basis of his CGPA.</strong>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2e1c9706",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:21.574484Z",
     "iopub.status.busy": "2024-08-21T10:35:21.574088Z",
     "iopub.status.idle": "2024-08-21T10:35:23.845718Z",
     "shell.execute_reply": "2024-08-21T10:35:23.844758Z"
    },
    "papermill": {
     "duration": 2.284112,
     "end_time": "2024-08-21T10:35:23.848456",
     "exception": false,
     "start_time": "2024-08-21T10:35:21.564344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b399de0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:23.868182Z",
     "iopub.status.busy": "2024-08-21T10:35:23.866911Z",
     "iopub.status.idle": "2024-08-21T10:35:23.893794Z",
     "shell.execute_reply": "2024-08-21T10:35:23.892695Z"
    },
    "papermill": {
     "duration": 0.039289,
     "end_time": "2024-08-21T10:35:23.896525",
     "exception": false,
     "start_time": "2024-08-21T10:35:23.857236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('/kaggle/input/placements/placement.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f3021880",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:23.916071Z",
     "iopub.status.busy": "2024-08-21T10:35:23.915296Z",
     "iopub.status.idle": "2024-08-21T10:35:23.938431Z",
     "shell.execute_reply": "2024-08-21T10:35:23.937361Z"
    },
    "papermill": {
     "duration": 0.035631,
     "end_time": "2024-08-21T10:35:23.940884",
     "exception": false,
     "start_time": "2024-08-21T10:35:23.905253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cgpa</th>\n",
       "      <th>package</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.89</td>\n",
       "      <td>3.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.12</td>\n",
       "      <td>1.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.82</td>\n",
       "      <td>3.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.42</td>\n",
       "      <td>3.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.94</td>\n",
       "      <td>3.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cgpa  package\n",
       "0  6.89     3.26\n",
       "1  5.12     1.98\n",
       "2  7.82     3.25\n",
       "3  7.42     3.67\n",
       "4  6.94     3.57"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a88675a8",
   "metadata": {
    "papermill": {
     "duration": 0.008746,
     "end_time": "2024-08-21T10:35:23.958399",
     "exception": false,
     "start_time": "2024-08-21T10:35:23.949653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "x = input data\n",
    "\n",
    "y = output data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13d8c476",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:23.977649Z",
     "iopub.status.busy": "2024-08-21T10:35:23.976949Z",
     "iopub.status.idle": "2024-08-21T10:35:24.365833Z",
     "shell.execute_reply": "2024-08-21T10:35:24.364693Z"
    },
    "papermill": {
     "duration": 0.401487,
     "end_time": "2024-08-21T10:35:24.368511",
     "exception": false,
     "start_time": "2024-08-21T10:35:23.967024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = 'cgpa', y = 'package', data = data)\n",
    "plt.xlabel(\"CGPA\")\n",
    "plt.ylabel(\"Package(in LPA)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5cdb7395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.389348Z",
     "iopub.status.busy": "2024-08-21T10:35:24.388585Z",
     "iopub.status.idle": "2024-08-21T10:35:24.394204Z",
     "shell.execute_reply": "2024-08-21T10:35:24.393150Z"
    },
    "papermill": {
     "duration": 0.018599,
     "end_time": "2024-08-21T10:35:24.396550",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.377951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x = data.iloc[:,0] # using CGPA as input\n",
    "y = data.iloc[:,1] # using Package as output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba11e852",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.417784Z",
     "iopub.status.busy": "2024-08-21T10:35:24.416976Z",
     "iopub.status.idle": "2024-08-21T10:35:24.702577Z",
     "shell.execute_reply": "2024-08-21T10:35:24.701534Z"
    },
    "papermill": {
     "duration": 0.299395,
     "end_time": "2024-08-21T10:35:24.705450",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.406055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "50cd2019",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.726184Z",
     "iopub.status.busy": "2024-08-21T10:35:24.725468Z",
     "iopub.status.idle": "2024-08-21T10:35:24.733756Z",
     "shell.execute_reply": "2024-08-21T10:35:24.732603Z"
    },
    "papermill": {
     "duration": 0.021406,
     "end_time": "2024-08-21T10:35:24.736237",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.714831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 27, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "def9a378",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.757146Z",
     "iopub.status.busy": "2024-08-21T10:35:24.756166Z",
     "iopub.status.idle": "2024-08-21T10:35:24.772433Z",
     "shell.execute_reply": "2024-08-21T10:35:24.771391Z"
    },
    "papermill": {
     "duration": 0.029261,
     "end_time": "2024-08-21T10:35:24.774867",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.745606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>cgpa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>156</td>\n",
       "      <td>7.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>124</td>\n",
       "      <td>6.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65</td>\n",
       "      <td>7.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87</td>\n",
       "      <td>8.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>169</td>\n",
       "      <td>9.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>56</td>\n",
       "      <td>5.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>31</td>\n",
       "      <td>8.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>72</td>\n",
       "      <td>7.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>184</td>\n",
       "      <td>7.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>19</td>\n",
       "      <td>7.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>160 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  cgpa\n",
       "0      156  7.38\n",
       "1      124  6.06\n",
       "2       65  7.60\n",
       "3       87  8.09\n",
       "4      169  9.31\n",
       "..     ...   ...\n",
       "155     56  5.84\n",
       "156     31  8.10\n",
       "157     72  7.78\n",
       "158    184  7.88\n",
       "159     19  7.48\n",
       "\n",
       "[160 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7a5c8af9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.796117Z",
     "iopub.status.busy": "2024-08-21T10:35:24.795357Z",
     "iopub.status.idle": "2024-08-21T10:35:24.801951Z",
     "shell.execute_reply": "2024-08-21T10:35:24.800910Z"
    },
    "papermill": {
     "duration": 0.019887,
     "end_time": "2024-08-21T10:35:24.804442",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.784555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40,)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "46d31db3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.828565Z",
     "iopub.status.busy": "2024-08-21T10:35:24.827764Z",
     "iopub.status.idle": "2024-08-21T10:35:24.834831Z",
     "shell.execute_reply": "2024-08-21T10:35:24.833786Z"
    },
    "papermill": {
     "duration": 0.023117,
     "end_time": "2024-08-21T10:35:24.837343",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.814226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40,)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2949a6d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.859140Z",
     "iopub.status.busy": "2024-08-21T10:35:24.858708Z",
     "iopub.status.idle": "2024-08-21T10:35:24.958610Z",
     "shell.execute_reply": "2024-08-21T10:35:24.957246Z"
    },
    "papermill": {
     "duration": 0.114091,
     "end_time": "2024-08-21T10:35:24.961385",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.847294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94945274",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:24.983529Z",
     "iopub.status.busy": "2024-08-21T10:35:24.982592Z",
     "iopub.status.idle": "2024-08-21T10:35:24.987662Z",
     "shell.execute_reply": "2024-08-21T10:35:24.986595Z"
    },
    "papermill": {
     "duration": 0.018719,
     "end_time": "2024-08-21T10:35:24.990060",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.971341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c02ec3d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.011507Z",
     "iopub.status.busy": "2024-08-21T10:35:25.011097Z",
     "iopub.status.idle": "2024-08-21T10:35:25.024498Z",
     "shell.execute_reply": "2024-08-21T10:35:25.023495Z"
    },
    "papermill": {
     "duration": 0.027059,
     "end_time": "2024-08-21T10:35:25.026944",
     "exception": false,
     "start_time": "2024-08-21T10:35:24.999885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cgpa</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>7.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>6.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>7.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>8.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>9.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>5.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>8.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>7.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>7.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>160 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       cgpa\n",
       "index      \n",
       "156    7.38\n",
       "124    6.06\n",
       "65     7.60\n",
       "87     8.09\n",
       "169    9.31\n",
       "...     ...\n",
       "56     5.84\n",
       "31     8.10\n",
       "72     7.78\n",
       "184    7.88\n",
       "19     7.48\n",
       "\n",
       "[160 rows x 1 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.reset_index().set_index('index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b862446c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.049012Z",
     "iopub.status.busy": "2024-08-21T10:35:25.048411Z",
     "iopub.status.idle": "2024-08-21T10:35:25.074266Z",
     "shell.execute_reply": "2024-08-21T10:35:25.073288Z"
    },
    "papermill": {
     "duration": 0.039918,
     "end_time": "2024-08-21T10:35:25.076834",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.036916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(x_train.reset_index().set_index('index'),y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c60f19f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.099125Z",
     "iopub.status.busy": "2024-08-21T10:35:25.098727Z",
     "iopub.status.idle": "2024-08-21T10:35:25.106811Z",
     "shell.execute_reply": "2024-08-21T10:35:25.105740Z"
    },
    "papermill": {
     "duration": 0.022163,
     "end_time": "2024-08-21T10:35:25.109261",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.087098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "103    7.05\n",
       "48     8.63\n",
       "40     9.38\n",
       "148    7.57\n",
       "185    6.31\n",
       "Name: cgpa, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0adabedd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.132427Z",
     "iopub.status.busy": "2024-08-21T10:35:25.131606Z",
     "iopub.status.idle": "2024-08-21T10:35:25.139931Z",
     "shell.execute_reply": "2024-08-21T10:35:25.138717Z"
    },
    "papermill": {
     "duration": 0.022504,
     "end_time": "2024-08-21T10:35:25.142173",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.119669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "103    3.00\n",
       "48     4.09\n",
       "40     4.02\n",
       "148    3.40\n",
       "185    3.18\n",
       "Name: package, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d226393e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.165523Z",
     "iopub.status.busy": "2024-08-21T10:35:25.164654Z",
     "iopub.status.idle": "2024-08-21T10:35:25.172845Z",
     "shell.execute_reply": "2024-08-21T10:35:25.171868Z"
    },
    "papermill": {
     "duration": 0.022363,
     "end_time": "2024-08-21T10:35:25.175316",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.152953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.05]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.reset_index().iloc[0,1].reshape(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0eb16a5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.200327Z",
     "iopub.status.busy": "2024-08-21T10:35:25.199299Z",
     "iopub.status.idle": "2024-08-21T10:35:25.211695Z",
     "shell.execute_reply": "2024-08-21T10:35:25.210646Z"
    },
    "papermill": {
     "duration": 0.028454,
     "end_time": "2024-08-21T10:35:25.214990",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.186536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3.0235988])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.reset_index().iloc[0,1].reshape(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda46822",
   "metadata": {
    "papermill": {
     "duration": 0.010999,
     "end_time": "2024-08-21T10:35:25.237428",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.226429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "orignal = **3.00**\n",
    "\n",
    "predicted = **3.0235888**\n",
    "\n",
    "After rounding the pedicted value, we can get the original value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "545d115b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.261533Z",
     "iopub.status.busy": "2024-08-21T10:35:25.260850Z",
     "iopub.status.idle": "2024-08-21T10:35:25.269280Z",
     "shell.execute_reply": "2024-08-21T10:35:25.268266Z"
    },
    "papermill": {
     "duration": 0.023446,
     "end_time": "2024-08-21T10:35:25.271852",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.248406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8.63]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.reset_index().iloc[1,1].reshape(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a242a4f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.296581Z",
     "iopub.status.busy": "2024-08-21T10:35:25.295709Z",
     "iopub.status.idle": "2024-08-21T10:35:25.305321Z",
     "shell.execute_reply": "2024-08-21T10:35:25.304119Z"
    },
    "papermill": {
     "duration": 0.024422,
     "end_time": "2024-08-21T10:35:25.307660",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.283238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3.92183708])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.reset_index().iloc[1,1].reshape(1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c9a2eb43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.333084Z",
     "iopub.status.busy": "2024-08-21T10:35:25.332067Z",
     "iopub.status.idle": "2024-08-21T10:35:25.340273Z",
     "shell.execute_reply": "2024-08-21T10:35:25.339116Z"
    },
    "papermill": {
     "duration": 0.02387,
     "end_time": "2024-08-21T10:35:25.343015",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.319145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3.31922152])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict([[7.57]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c31a7fad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T10:35:25.368846Z",
     "iopub.status.busy": "2024-08-21T10:35:25.367886Z",
     "iopub.status.idle": "2024-08-21T10:35:25.378271Z",
     "shell.execute_reply": "2024-08-21T10:35:25.377051Z"
    },
    "papermill": {
     "duration": 0.025844,
     "end_time": "2024-08-21T10:35:25.380576",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.354732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3.31922152])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.reset_index().iloc[3,1].reshape(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cea860f",
   "metadata": {
    "papermill": {
     "duration": 0.011529,
     "end_time": "2024-08-21T10:35:25.404197",
     "exception": false,
     "start_time": "2024-08-21T10:35:25.392668",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can also pass value as:\n",
    "\n",
    "**lr.predict([[value]])**\n",
    "\n",
    "Just pass the value in **double brackets [[]]**."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5537740,
     "sourceId": 9165180,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.487091,
   "end_time": "2024-08-21T10:35:26.038199",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-21T10:35:18.551108",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
