{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "243743f1",
   "metadata": {
    "papermill": {
     "duration": 0.012862,
     "end_time": "2024-08-22T03:40:17.403280",
     "exception": false,
     "start_time": "2024-08-22T03:40:17.390418",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Salary Prediction:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4f18db0",
   "metadata": {
    "papermill": {
     "duration": 0.011724,
     "end_time": "2024-08-22T03:40:17.427513",
     "exception": false,
     "start_time": "2024-08-22T03:40:17.415789",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<strong>Here, we are making a ML model which predicts the salary(package) of a person on the basis of his CGPA.</strong>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8159f40e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:17.454018Z",
     "iopub.status.busy": "2024-08-22T03:40:17.453530Z",
     "iopub.status.idle": "2024-08-22T03:40:20.190121Z",
     "shell.execute_reply": "2024-08-22T03:40:20.188575Z"
    },
    "papermill": {
     "duration": 2.753739,
     "end_time": "2024-08-22T03:40:20.193496",
     "exception": false,
     "start_time": "2024-08-22T03:40:17.439757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e99be183",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:20.220609Z",
     "iopub.status.busy": "2024-08-22T03:40:20.220026Z",
     "iopub.status.idle": "2024-08-22T03:40:20.250469Z",
     "shell.execute_reply": "2024-08-22T03:40:20.249399Z"
    },
    "papermill": {
     "duration": 0.04759,
     "end_time": "2024-08-22T03:40:20.253710",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.206120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('/kaggle/input/placements/placement.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "acb24c91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:20.280496Z",
     "iopub.status.busy": "2024-08-22T03:40:20.280085Z",
     "iopub.status.idle": "2024-08-22T03:40:20.308317Z",
     "shell.execute_reply": "2024-08-22T03:40:20.307030Z"
    },
    "papermill": {
     "duration": 0.044989,
     "end_time": "2024-08-22T03:40:20.311243",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.266254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cgpa</th>\n",
       "      <th>package</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.89</td>\n",
       "      <td>3.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.12</td>\n",
       "      <td>1.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.82</td>\n",
       "      <td>3.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.42</td>\n",
       "      <td>3.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.94</td>\n",
       "      <td>3.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cgpa  package\n",
       "0  6.89     3.26\n",
       "1  5.12     1.98\n",
       "2  7.82     3.25\n",
       "3  7.42     3.67\n",
       "4  6.94     3.57"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96a0e679",
   "metadata": {
    "papermill": {
     "duration": 0.012367,
     "end_time": "2024-08-22T03:40:20.336810",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.324443",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Graph without Linear Regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d03e20d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:20.365259Z",
     "iopub.status.busy": "2024-08-22T03:40:20.364809Z",
     "iopub.status.idle": "2024-08-22T03:40:20.789192Z",
     "shell.execute_reply": "2024-08-22T03:40:20.788045Z"
    },
    "papermill": {
     "duration": 0.441222,
     "end_time": "2024-08-22T03:40:20.791676",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.350454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = 'cgpa', y = 'package', data = data)\n",
    "plt.xlabel(\"CGPA\")\n",
    "plt.ylabel(\"Package(in LPA)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82a791a6",
   "metadata": {
    "papermill": {
     "duration": 0.012639,
     "end_time": "2024-08-22T03:40:20.817308",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.804669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "x = input data\n",
    "\n",
    "y = output data\n",
    "\n",
    "**Pass input and output as *dataframe*, otherwise, there will be an error.**\n",
    "\n",
    "**Use double brackets [[]] to pass the features as dataframe.**\n",
    "\n",
    "**For Example: x = data[['cgpa']]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b9322276",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:20.845884Z",
     "iopub.status.busy": "2024-08-22T03:40:20.845455Z",
     "iopub.status.idle": "2024-08-22T03:40:20.856632Z",
     "shell.execute_reply": "2024-08-22T03:40:20.855417Z"
    },
    "papermill": {
     "duration": 0.0291,
     "end_time": "2024-08-22T03:40:20.859480",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.830380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x = data[['cgpa']] # using CGPA as input (can also write as x = data.iloc[:,0:1])\n",
    "y = data[['package']] # using Package as output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b9bf5573",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:20.887894Z",
     "iopub.status.busy": "2024-08-22T03:40:20.887478Z",
     "iopub.status.idle": "2024-08-22T03:40:21.189011Z",
     "shell.execute_reply": "2024-08-22T03:40:21.187806Z"
    },
    "papermill": {
     "duration": 0.319352,
     "end_time": "2024-08-22T03:40:21.192062",
     "exception": false,
     "start_time": "2024-08-22T03:40:20.872710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb1f2ac1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.220322Z",
     "iopub.status.busy": "2024-08-22T03:40:21.219886Z",
     "iopub.status.idle": "2024-08-22T03:40:21.229722Z",
     "shell.execute_reply": "2024-08-22T03:40:21.228595Z"
    },
    "papermill": {
     "duration": 0.027025,
     "end_time": "2024-08-22T03:40:21.232362",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.205337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 27, test_size = 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7525cee8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.260537Z",
     "iopub.status.busy": "2024-08-22T03:40:21.260077Z",
     "iopub.status.idle": "2024-08-22T03:40:21.276048Z",
     "shell.execute_reply": "2024-08-22T03:40:21.274442Z"
    },
    "papermill": {
     "duration": 0.033348,
     "end_time": "2024-08-22T03:40:21.278828",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.245480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>cgpa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>156</td>\n",
       "      <td>7.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>124</td>\n",
       "      <td>6.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65</td>\n",
       "      <td>7.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87</td>\n",
       "      <td>8.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>169</td>\n",
       "      <td>9.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>56</td>\n",
       "      <td>5.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>31</td>\n",
       "      <td>8.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>72</td>\n",
       "      <td>7.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>184</td>\n",
       "      <td>7.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>19</td>\n",
       "      <td>7.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>160 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  cgpa\n",
       "0      156  7.38\n",
       "1      124  6.06\n",
       "2       65  7.60\n",
       "3       87  8.09\n",
       "4      169  9.31\n",
       "..     ...   ...\n",
       "155     56  5.84\n",
       "156     31  8.10\n",
       "157     72  7.78\n",
       "158    184  7.88\n",
       "159     19  7.48\n",
       "\n",
       "[160 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "67ef124f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.307661Z",
     "iopub.status.busy": "2024-08-22T03:40:21.307199Z",
     "iopub.status.idle": "2024-08-22T03:40:21.315245Z",
     "shell.execute_reply": "2024-08-22T03:40:21.313926Z"
    },
    "papermill": {
     "duration": 0.025517,
     "end_time": "2024-08-22T03:40:21.317945",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.292428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40, 1)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9d7d914a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.348434Z",
     "iopub.status.busy": "2024-08-22T03:40:21.347246Z",
     "iopub.status.idle": "2024-08-22T03:40:21.354981Z",
     "shell.execute_reply": "2024-08-22T03:40:21.353848Z"
    },
    "papermill": {
     "duration": 0.026036,
     "end_time": "2024-08-22T03:40:21.357891",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.331855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40, 1)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6d8b26bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.387827Z",
     "iopub.status.busy": "2024-08-22T03:40:21.387356Z",
     "iopub.status.idle": "2024-08-22T03:40:21.518605Z",
     "shell.execute_reply": "2024-08-22T03:40:21.517237Z"
    },
    "papermill": {
     "duration": 0.150338,
     "end_time": "2024-08-22T03:40:21.522040",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.371702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0402eaf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.552379Z",
     "iopub.status.busy": "2024-08-22T03:40:21.551182Z",
     "iopub.status.idle": "2024-08-22T03:40:21.557045Z",
     "shell.execute_reply": "2024-08-22T03:40:21.555827Z"
    },
    "papermill": {
     "duration": 0.023778,
     "end_time": "2024-08-22T03:40:21.559702",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.535924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7772dcc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.590066Z",
     "iopub.status.busy": "2024-08-22T03:40:21.589604Z",
     "iopub.status.idle": "2024-08-22T03:40:21.604837Z",
     "shell.execute_reply": "2024-08-22T03:40:21.603502Z"
    },
    "papermill": {
     "duration": 0.033484,
     "end_time": "2024-08-22T03:40:21.608000",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.574516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cgpa</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>7.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>6.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>7.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>8.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>9.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>5.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>8.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>7.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>7.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>160 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       cgpa\n",
       "index      \n",
       "156    7.38\n",
       "124    6.06\n",
       "65     7.60\n",
       "87     8.09\n",
       "169    9.31\n",
       "...     ...\n",
       "56     5.84\n",
       "31     8.10\n",
       "72     7.78\n",
       "184    7.88\n",
       "19     7.48\n",
       "\n",
       "[160 rows x 1 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.reset_index().set_index('index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0d3550b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.638758Z",
     "iopub.status.busy": "2024-08-22T03:40:21.638315Z",
     "iopub.status.idle": "2024-08-22T03:40:21.663960Z",
     "shell.execute_reply": "2024-08-22T03:40:21.662664Z"
    },
    "papermill": {
     "duration": 0.04383,
     "end_time": "2024-08-22T03:40:21.666574",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.622744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f282dff5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.698467Z",
     "iopub.status.busy": "2024-08-22T03:40:21.698033Z",
     "iopub.status.idle": "2024-08-22T03:40:21.709609Z",
     "shell.execute_reply": "2024-08-22T03:40:21.708388Z"
    },
    "papermill": {
     "duration": 0.029777,
     "end_time": "2024-08-22T03:40:21.712219",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.682442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cgpa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>7.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>8.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>9.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>6.31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cgpa\n",
       "103  7.05\n",
       "48   8.63\n",
       "40   9.38\n",
       "148  7.57\n",
       "185  6.31"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "465c3193",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.743450Z",
     "iopub.status.busy": "2024-08-22T03:40:21.743018Z",
     "iopub.status.idle": "2024-08-22T03:40:21.754512Z",
     "shell.execute_reply": "2024-08-22T03:40:21.753131Z"
    },
    "papermill": {
     "duration": 0.030667,
     "end_time": "2024-08-22T03:40:21.757392",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.726725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>package</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>4.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>4.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>3.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>3.18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     package\n",
       "103     3.00\n",
       "48      4.09\n",
       "40      4.02\n",
       "148     3.40\n",
       "185     3.18"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2b5e76d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.791004Z",
     "iopub.status.busy": "2024-08-22T03:40:21.790563Z",
     "iopub.status.idle": "2024-08-22T03:40:21.800025Z",
     "shell.execute_reply": "2024-08-22T03:40:21.798569Z"
    },
    "papermill": {
     "duration": 0.028288,
     "end_time": "2024-08-22T03:40:21.802684",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.774396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.05]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.reset_index().iloc[0,1].reshape(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f79b329",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.834562Z",
     "iopub.status.busy": "2024-08-22T03:40:21.834107Z",
     "iopub.status.idle": "2024-08-22T03:40:21.842970Z",
     "shell.execute_reply": "2024-08-22T03:40:21.841708Z"
    },
    "papermill": {
     "duration": 0.028141,
     "end_time": "2024-08-22T03:40:21.845769",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.817628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7.05])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.iloc[0].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4cd3b126",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.878702Z",
     "iopub.status.busy": "2024-08-22T03:40:21.878283Z",
     "iopub.status.idle": "2024-08-22T03:40:21.886897Z",
     "shell.execute_reply": "2024-08-22T03:40:21.885610Z"
    },
    "papermill": {
     "duration": 0.028162,
     "end_time": "2024-08-22T03:40:21.889877",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.861715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.05]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.iloc[0].values.reshape(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bf6c9e2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:21.923872Z",
     "iopub.status.busy": "2024-08-22T03:40:21.923015Z",
     "iopub.status.idle": "2024-08-22T03:40:21.934957Z",
     "shell.execute_reply": "2024-08-22T03:40:21.933550Z"
    },
    "papermill": {
     "duration": 0.032801,
     "end_time": "2024-08-22T03:40:21.937908",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.905107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[3.0235988]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.iloc[0].values.reshape(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "593c822c",
   "metadata": {
    "papermill": {
     "duration": 0.017425,
     "end_time": "2024-08-22T03:40:21.971806",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.954381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "orignal = **3.00**\n",
    "\n",
    "predicted = **3.0235888**\n",
    "\n",
    "After rounding the pedicted value, we can get the original value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fe54b6e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.006884Z",
     "iopub.status.busy": "2024-08-22T03:40:22.006487Z",
     "iopub.status.idle": "2024-08-22T03:40:22.017304Z",
     "shell.execute_reply": "2024-08-22T03:40:22.015691Z"
    },
    "papermill": {
     "duration": 0.03065,
     "end_time": "2024-08-22T03:40:22.020271",
     "exception": false,
     "start_time": "2024-08-22T03:40:21.989621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8.63]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.reset_index().iloc[1,1].reshape(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "601c050d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.057634Z",
     "iopub.status.busy": "2024-08-22T03:40:22.056212Z",
     "iopub.status.idle": "2024-08-22T03:40:22.068656Z",
     "shell.execute_reply": "2024-08-22T03:40:22.067214Z"
    },
    "papermill": {
     "duration": 0.033991,
     "end_time": "2024-08-22T03:40:22.071507",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.037516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[3.92183708]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.reset_index().iloc[1,1].reshape(1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "482b580b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.107671Z",
     "iopub.status.busy": "2024-08-22T03:40:22.107194Z",
     "iopub.status.idle": "2024-08-22T03:40:22.117391Z",
     "shell.execute_reply": "2024-08-22T03:40:22.115857Z"
    },
    "papermill": {
     "duration": 0.032646,
     "end_time": "2024-08-22T03:40:22.121114",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.088468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[3.31922152]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict([[7.57]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "126196c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.156097Z",
     "iopub.status.busy": "2024-08-22T03:40:22.155648Z",
     "iopub.status.idle": "2024-08-22T03:40:22.166012Z",
     "shell.execute_reply": "2024-08-22T03:40:22.164711Z"
    },
    "papermill": {
     "duration": 0.031398,
     "end_time": "2024-08-22T03:40:22.168667",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.137269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[3.31922152]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.reset_index().iloc[3,1].reshape(1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "250b8c1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.203624Z",
     "iopub.status.busy": "2024-08-22T03:40:22.203188Z",
     "iopub.status.idle": "2024-08-22T03:40:22.213380Z",
     "shell.execute_reply": "2024-08-22T03:40:22.211497Z"
    },
    "papermill": {
     "duration": 0.03063,
     "end_time": "2024-08-22T03:40:22.216003",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.185373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[3.31922152]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.predict(x_test.iloc[3].values.reshape(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a431d11f",
   "metadata": {
    "papermill": {
     "duration": 0.016732,
     "end_time": "2024-08-22T03:40:22.249778",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.233046",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can also pass value as:\n",
    "\n",
    "**lr.predict([[value]])**\n",
    "\n",
    "Just pass the value in **double brackets [[]]**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7769a106",
   "metadata": {
    "papermill": {
     "duration": 0.016283,
     "end_time": "2024-08-22T03:40:22.282923",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.266640",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**y = mx + c**\n",
    "\n",
    "Here **m = slope** and **c = y intercpet**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0eb1d2c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.320418Z",
     "iopub.status.busy": "2024-08-22T03:40:22.319965Z",
     "iopub.status.idle": "2024-08-22T03:40:22.327283Z",
     "shell.execute_reply": "2024-08-22T03:40:22.325776Z"
    },
    "papermill": {
     "duration": 0.030228,
     "end_time": "2024-08-22T03:40:22.330322",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.300094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.56850524]]\n",
      "[-0.98436317]\n"
     ]
    }
   ],
   "source": [
    "slope = lr.coef_\n",
    "yIntercept = lr.intercept_\n",
    "print(slope)\n",
    "print(yIntercept)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b166b03c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.366127Z",
     "iopub.status.busy": "2024-08-22T03:40:22.365714Z",
     "iopub.status.idle": "2024-08-22T03:40:22.374172Z",
     "shell.execute_reply": "2024-08-22T03:40:22.372845Z"
    },
    "papermill": {
     "duration": 0.029996,
     "end_time": "2024-08-22T03:40:22.376942",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.346946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3.0235988]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = slope * 7.05 + yIntercept\n",
    "y # you can compare the answer with the first prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fdfd5e48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.476595Z",
     "iopub.status.busy": "2024-08-22T03:40:22.476154Z",
     "iopub.status.idle": "2024-08-22T03:40:22.485384Z",
     "shell.execute_reply": "2024-08-22T03:40:22.484185Z"
    },
    "papermill": {
     "duration": 0.093854,
     "end_time": "2024-08-22T03:40:22.488147",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.394293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.05]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.reset_index().iloc[0,1].reshape(1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "907e8149",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.525463Z",
     "iopub.status.busy": "2024-08-22T03:40:22.525002Z",
     "iopub.status.idle": "2024-08-22T03:40:22.532785Z",
     "shell.execute_reply": "2024-08-22T03:40:22.531538Z"
    },
    "papermill": {
     "duration": 0.030167,
     "end_time": "2024-08-22T03:40:22.535442",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.505275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['cgpa'], dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.feature_names_in_ # Tells which feature(input) is used"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b22e849",
   "metadata": {
    "papermill": {
     "duration": 0.01731,
     "end_time": "2024-08-22T03:40:22.571447",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.554137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Score of the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2991be10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.608879Z",
     "iopub.status.busy": "2024-08-22T03:40:22.608472Z",
     "iopub.status.idle": "2024-08-22T03:40:22.620468Z",
     "shell.execute_reply": "2024-08-22T03:40:22.619011Z"
    },
    "papermill": {
     "duration": 0.033885,
     "end_time": "2024-08-22T03:40:22.623051",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.589166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7309557444768802"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8be2fa59",
   "metadata": {
    "papermill": {
     "duration": 0.017138,
     "end_time": "2024-08-22T03:40:22.657471",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.640333",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse).**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb9f0fae",
   "metadata": {
    "papermill": {
     "duration": 0.017148,
     "end_time": "2024-08-22T03:40:22.691840",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.674692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Graph of Linear Regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5cadb2fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T03:40:22.728740Z",
     "iopub.status.busy": "2024-08-22T03:40:22.728276Z",
     "iopub.status.idle": "2024-08-22T03:40:23.067306Z",
     "shell.execute_reply": "2024-08-22T03:40:23.065623Z"
    },
    "papermill": {
     "duration": 0.36109,
     "end_time": "2024-08-22T03:40:23.070537",
     "exception": false,
     "start_time": "2024-08-22T03:40:22.709447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7b2482653dc0>]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = 'cgpa', y = 'package', data = data)\n",
    "plt.plot(x_train, lr.predict(x_train), color = 'red')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5537740,
     "sourceId": 9165180,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.584812,
   "end_time": "2024-08-22T03:40:23.812295",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-22T03:40:13.227483",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
